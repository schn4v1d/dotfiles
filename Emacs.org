#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 4 :ignore (this)
:END:
:CONTENTS:
- [[#basic-configuration][Basic Configuration]]
- [[#system-settings][System Settings]]
- [[#package-management][Package Management]]
  - [[#setup-setupel][Setup setup.el]]
    - [[#pkg][:pkg]]
    - [[#delay][:delay]]
    - [[#load-after][:load-after]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#git][Git]]
- [[#completion][Completion]]
  - [[#ivy][Ivy]]
- [[#editing][Editing]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs][Use spaces instead of tabs]]
  - [[#commenting-lines][Commenting Lines]]
- [[#other-stuff][Other Stuff]]
- [[#theme-configuration][Theme Configuration]]
- [[#font-configuration][Font Configuration]]
- [[#programming][Programming]]
  - [[#lua][Lua]]
- [[#org-mode][Org Mode]]
  - [[#org-roam][Org Roam]]
  - [[#visual-fill][Visual Fill]]
  - [[#auto-tangle-configuration][Auto-tangle Configuration]]
- [[#evil-mode][Evil Mode]]
- [[#key-bindings][Key Bindings]]
  - [[#esc-cancels-all][ESC Cancels All]]
  - [[#unbind-c-z][Unbind C-z]]
  - [[#set-up-which-key][Set up which-key]]
  - [[#set-up-general][Set up general]]
  - [[#basic-keybindings][Basic Keybindings]]
- [[#emacs-guix-profile][Emacs Guix Profile]]
:END:

* Basic Configuration
  
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 0)

  (menu-bar-mode -1)

  (setq visible-bell t)

  (load-theme 'wombat)



#+end_src


* System Settings

#+begin_src emacs-lisp

  (setq schnavid/is-guix-system (eq system-type 'gnu/linux))

#+end_src

* Package Management

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

  (unless (featurep 'straight)
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

#+end_src

** Setup =setup.el=

#+begin_src emacs-lisp

  (straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
  (require 'setup)

#+end_src

*** =:pkg=

#+begin_src emacs-lisp

  (defvar schnavid/guix-emacs-packages '()
    "Contains a list of all Emacs package names that must be installed via Guix.")

  (defun schnavid/filter-straight-recipe (recipe)
    (let* ((plist (cdr recipe))
           (name (plist-get plist :straight)))
      (cons (if (and name (not (equal name t)))
                name
              (car recipe))
            (plist-put plist :straight nil))))

  (setup-define :pkg
                (lambda (&rest recipe)
                  (if (and schnavid/is-guix-system
                           (or (eq (length recipe) 1)
                               (plist-get (cdr recipe) :guix)))
                      `(add-to-list 'schnavid/guix-emacs-packages
                                    ,(or (plist-get recipe :guix)
                                         (concat "emacs-" (symbol-name (car recipe)))))
                    `(straight-use-package ',(schnavid/filter-straight-recipe recipe))))
                :documentation "Install RECIPE via Guix or straight.el"
                :shorthand #'cadr)

#+end_src

*** =:delay=

#+begin_src emacs-lisp

  (setup-define :delay
    (lambda (&rest time)
      `(run-with-idle-timer ,(or time 1)
                            nil ;; Don't repeat
                            (lambda () (require ',(setup-get 'feature)))))
    :documentation "Delay loading the feature until a certain amount of idle time has passed.")

#+end_src

*** =:load-after=

#+begin_src emacs-lisp

  (setup-define :load-after
    (lambda (features &rest body)
      (let ((body `(progn
                     (require ',(setup-get 'feature))
                     ,@body)))
        (dolist (feature (if (listp features)
                             (nreverse features)
                           (list features)))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
    :documentation "Load the current feature after FEATURES."
    :indent 1)

#+end_src

* Keep =.emacs.d= Clean

#+begin_src emacs-lisp

  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file     (expand-file-name "url/history" user-emacs-directory))

  (setup (:pkg no-littering)
    (require 'no-littering))

  (setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
      (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-no-littering"

#+end_src

* Git

#+begin_src emacs-lisp

  (setup (:pkg magit)
    (:also-load magit-todos)
    (:global "C-M-;" magit-status)
    (:option magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-magit"
  "emacs-magit-todos"

#+end_src

* Completion

** Ivy

#+begin_src emacs-lisp

  (setup (:pkg ivy)
    (:bind "C-s" swiper)
    (:with-map ivy-minibuffer-map
      (:bind "TAB" ivy-alt-done
             "C-l" ivy-alt-done
             "C-j" ivy-next-line
             "C-k" ivy-previous-line))
    (:with-map ivy-switch-buffer-map
      (:bind "C-k" ivy-previous-line
             "C-l" ivy-done
             "C-d" ivy-switch-buffer-kill))
    (:with-map ivy-reverse-i-search-map
      (:bind "C-k" ivy-previous-line
             "C-d" ivy-reverse-i-search-kill))
    (ivy-mode 1))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-ivy"

#+end_src

* Editing

** Tab Widths

#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)

#+end_src

** Use spaces instead of tabs

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)

#+end_src

** Commenting Lines

#+begin_src emacs-lisp

  (setup (:pkg evil-nerd-commenter)
    (:global "M-/" evilnc-comment-or-uncomment-lines))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-evil-nerd-commenter"

#+end_src

* Other Stuff

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 25))

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setup (:pkg rainbow-delimiters)
    (:hook-into prog-mode))

  (setup (:pkg ivy-rich)
    (ivy-rich-mode 1))

  (setup (:pkg counsel)
    (:bind "M-x"  counsel-M-x
           "C-x b"  counsel-ibuffer
           "C-x C-f"  counsel-find-file)
    (:with-map minibuffer-local-map
      (:bind "C-r" 'counsel-minibuffer-history)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-rainbow-delimiters"
  "emacs-ivy-rich"
  "emacs-counsel"

#+end_src

* Theme Configuration

#+begin_src emacs-lisp

  (setup (:pkg doom-themes))
  (load-theme 'doom-vibrant t)
  (doom-themes-visual-bell-config)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-doom-themes"

#+end_src

* Font Configuration

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code Retina" :height 140)

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "font-fira-code"

#+end_src

* Programming

** Lua

#+begin_src emacs-lisp

  (setup (:pkg lua-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lua-mode"

#+end_src

* Org Mode

[[https://orgmode.org][Org Mode Homepage]]

#+begin_src emacs-lisp

  (defun schnavid/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (setup (:pkg org)
    (:hook schnavid/org-mode-setup))

  (setup (:pkg org-bullets)
    (:hook-into org-mode))

  (setup (:pkg org-make-toc)
    (:hook-into org-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org"
  "emacs-org-bullets"
  "emacs-org-make-toc"

#+end_src

** Org Roam

#+begin_src emacs-lisp

  (setup (:pkg org-roam)
    (setq org-roam-v2-ack t)
    (:option org-roam-directory "~/RoamNotes")
    (:global "C-c n l" org-roam-buffer-toggle
             "C-c n f" org-roam-node-find
             "C-c n i" org-roam-node-insert))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-org-roam"

#+end_src

** Visual Fill

#+begin_src emacs-lisp

  (setup (:pkg visual-fill-column)
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (:hook-into org-mode))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-visual-fill-column"

#+end_src

** Auto-tangle Configuration

#+begin_src emacs-lisp

  (defun schnavid/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
        (expand-file-name "~/dotfiles/Emacs.org"))
        (let ((org-confirm-babel-evauate nil))
          (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook
                                                #'schnavid/org-babel-tangle-config)))

#+end_src

* Evil Mode

#+begin_src emacs-lisp

  (setup (:pkg undo-tree)
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))

  (setup (:pkg evil)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    ; (setq evil-undo-system 'undo-tree)

    (evil-mode 1)

    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode))

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; (setup (:pkg evil-collection)
  ;;   (setq evil-collection-company-use-tng nil)
  ;;   (:load-after evil
  ;;     (:option evil-collection-outline-bind-tab-p nil
  ;;              (remove evil-collection-mode-list) 'lispy
  ;;              (remove evil-collection-mode-list) 'org-present)
  ;;     (evil-collection-init)))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-undo-tree"
  "emacs-evil"
  "emacs-evil-collection"

#+end_src

* Key Bindings

** ESC Cancels All

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Unbind =C-z=

#+begin_src emacs-lisp

  (global-unset-key (kbd "C-z"))

#+end_src

** Set up =which-key=

#+begin_src emacs-lisp

  (setup (:pkg which-key)
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-which-key"

#+end_src

** Set up =general=

#+begin_src emacs-lisp

  (setup (:pkg general)
    (general-evil-setup t)

    (general-create-definer schnavid/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-general"

#+end_src

** Basic Keybindings

#+begin_src emacs-lisp

  (schnavid/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "f"  '(:ignore t :which-key "files")
    "ff" '(counsel-find-file :which-key "find file"))

#+end_src

* Emacs Guix Profile

*.config/guix/manifests/emacs.scm:*

#+begin_src scheme :tangle .config/guix/manifests/emacs.scm :noweb yes

  (specifications->manifest
   '("emacs"
     <<packages>>))

#+end_src
