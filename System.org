#+TITLE: System Configuration
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Channels

*.config/guix/base-channels.scm:*

#+begin_src scheme :tangle .config/guix/base-channels.scm

  ;; NOTE: This file is generated from ~/dotfiles/System.org. Please see commentary there.

  (list (channel
          (name 'guix)
          (url "https://git.savannah.gnu.org/git/guix.git")
          (introduction
            (make-channel-introduction
              "9edb3f66fd807b096b48283debdcddccfea34bad"
              (openpgp-fingerprint
                "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
        (channel
          (name 'nonguix)
          (url "https://gitlab.com/nonguix/nonguix")
          (introduction
            (make-channel-introduction
              "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
              (openpgp-fingerprint
                "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))))

#+end_src

* Systems

** Base Configuration

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

  ;; NOTE: This file is generated from ~/dotfiles/System.org. Please see commentary there

  (define-module (base-system)
    #:use-module (gnu)
    #:use-module (srfi srfi-1)
    #:use-module (gnu system nss)
    #:use-module (gnu services pm)
    #:use-module (gnu services cups)
    #:use-module (gnu services desktop)
    #:use-module (gnu services docker)
    #:use-module (gnu services networking)
    #:use-module (gnu services virtualization)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages cups)
    #:use-module (gnu packages vim)
    #:use-module (gnu packages gtk)
    #:use-module (gnu packages xorg)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages file-systems)
    #:use-module (gnu packages gnome)
    #:use-module (gnu packages mtools)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages audio)
    #:use-module (gnu packages gnuzilla)
    #:use-module (gnu packages pulseaudio)
    #:use-module (gnu packages web-browsers)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages package-management)
    #:use-module (gnu packages zsh)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd))

  (use-service-modules nix)
  (use-service-modules desktop xorg)
  (use-package-modules certs)
  (use-package-modules shells)

#+end_src

Add a =udev= rule to enable members of the =video= group to control screen brightness.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

  ;; Allow members of the "video" group to change the screen brightness.
  (define %backlight-udev-rule
    (udev-rule
      "90.backlight.rules"
      (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                     "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                     "\n"
                     "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                     "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

#+end_src

Override the default =%desktop-services= to add the =udev= backlight configuration and include OpenVPN in the list of NetworkManager plugins.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

  (define %my-desktop-services
    (modify-services %desktop-services
                     (elogind-service-type config =>
                                           (elogind-configuration (inherit config)
                                                                  (handle-lid-switch-external-power 'suspend)))
                     (udev-service-type config =>
                                        (udev-configuration (inherit config)
                                                            (rules (cons %backlight-udev-rule
                                                                         (udev-configuration-rules config)))))
                     (network-manager-service-type config =>
                                                   (network-manager-configuration (inherit config)
                                                                                  (vpn-plugins (list network-manager-openvpn))))))

#+end_src

Use the =libinput= driver for all input devices since it's a bit more modern than the default.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

  (define %xorg-libinput-config
    "Section \"InputClass\"
    Identifier \"Touchpads\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"MiddleEmulation\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
  EndSection
  Section \"InputClass\"
    Identifier \"Keyboards\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection
  ")

#+end_src

Define the =base-operating-system= which will be inherited by all machine configurations.

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

  (define-public base-operating-system
    (operating-system
     (host-name "base")
     (timezone "Europe/Berlin")
     (locale "en_US.utf8")

     ;; Use non-free Linux and firmware
     (kernel linux)
     (firmware (list linux-firmware))
     (initrd microcode-initrd)

     ;; Choose UK English keyboard layout.
     (keyboard-layout (keyboard-layout "gb" "intl"))

     ;; Use the UEFI variant of GRUB with the EFI System
     ;; Partition mounted on /boot/efi
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (targets (list "/boot/efi"))
                  (keyboard-layout keyboard-layout)))

     ;; Guix doesn't like it when there isn't a file-systems
     ;; entry, so add one that is meant to be overridden
     (file-systems (cons*
                    (file-system
                     (mount-point "/tmp")
                     (device "none")
                     (type "tmpfs")
                     (check? #f))
                    %base-file-systems))
     (users (cons (user-account
                   (name "schnavid")
                   (comment "David Schneider")
                   (group "users")
                   (shell (file-append zsh "/bin/zsh"))
                   (home-directory "/home/schnavid")
                   (supplementary-groups
                    '("wheel"              ; sudo
                      "netdev"             ; network devices
                      "docker"
                      "realtime"           ; Enable realtime scheduling
                      "lp"                 ; control bluetooth devices
                      "audio"              ; control audio devices
                      "video")))           ; control video devices
                  %base-user-accounts))
     ;; Add the 'realtime' group
     (groups (cons (user-group (system? #t) (name "realtime"))
                   %base-groups))

     ;; Install bare-minimum system packages
     (packages (append (list git
                             ntfs-3g
                             exfat-utils
                             fuse-exfat
                             stow
                             vim
                             emacs
                             xterm
                             bluez
                             bluez-alsa
                             pulseaudio
                             tlp
                             xf86-input-libinput
                             nss-certs       ; for HTTPS access
                             gvfs)           ; for user mounts
                       %base-packages))

     ;; Use the "desktop" services, whch include the X11 log-in service,
     ;; networking with NetworkManager, and more
     (services (cons* (service slim-service-type
                               (slim-configuration
                                (xorg-configuration
                                 (xorg-configuration
                                  (keyboard-layout keyboard-layout)
                                  (extra-config (list %xorg-libinput-config))))))
                      (service tlp-service-type
                               (tlp-configuration
                                (cpu-boost-on-ac? #t)
                                (wifi-pwr-on-bat? #t)))
                      (pam-limits-service ;; This enables JACK to enter realtime mode
                       (list
                        (pam-limits-entry "@realtime" 'both 'rtprio 99)
                        (pam-limits-entry "@realtime" 'both 'memlock 'unlimited)))
                      (extra-special-file "/usr/bin/env"
                                          (file-append coreutils "/bin/env"))
                      (service thermald-service-type)
                      (service docker-service-type)
                      (service libvirt-service-type
                               (libvirt-configuration
                                (unix-sock-group "libvirt")
                                (tls-port "16555")))
                      (service cups-service-type
                               (cups-configuration
                                (web-interface? #t)
                                (extensions
                                 (list cups-filters))))
                      (service nix-service-type)
                      (bluetooth-service #:auto-enable? #t)
                      (remove (lambda (service)
                                (eq? (service-kind service) gdm-service-type))
                              %my-desktop-services)))

     ;; Allow resolution of '.local' host names with mDNS
     (name-service-switch %mdns-host-lookup-nss)))

#+end_src

** Machines

*** Per-System Settings

Some settings need to be customized on a per-system basis without tweaking individual configuration files. Thanks to =org-mode='s =noweb= functionality, I can define a set of variables that can be tweaked for each system and applied across these configuration files when they get generated.

I also define a function called =schnavid/system-settings-get= which can retrieve these settings appropriately.

#+begin_src emacs-lisp :tangle .emacs.d/per-system-settings.el :noweb yes

  (require 'map) ;; Needed for map merge

  (setq schnavid/system-settings
        (map-merge
         'list
         '())
        <<system-settings>>)

#+end_src

*** wilfried

=wilfried= is a custom-built home tower with Windows 11 and GNU Guix installed.

*.config/guix/systems/wilfried.scm:*

#+begin_src scheme :tangle .config/guix/systems/wilfried.scm

  ;; NOTE: This file is generated from ~/dotfiles/System.org. Please see commentary there.

  (define-module (wilfried)
    #:use-module (base-system)
    #:use-module (gnu))

  (operating-system
   (inherit base-operating-system)
   (host-name "wilfried")

   (file-systems
    (cons* (file-system
            (mount-point "/")
            (device
             (uuid "b32a7902-39ac-428f-be39-6621af8f4f83"
                   'ext4))
            (type "ext4"))
           (file-system
            (mount-point "/boot/efi")
            (device (uuid "549C-9631" 'fat32))
            (type "vfat"))
           %base-file-systems)))

#+end_src

* Scripts

*bin/activate-profiles:*

#+begin_src shell :tangle bin/activate-profiles

  GREEN='\033[1;32m'
  RED='\033[1;30m'
  NC='\033[0m'
  GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

  profiles=$*
  if [[ $# -eq 0 ]]; then
    profiles="$HOME/.config/guix/manifests/*.scm";
  fi

  for profile in $profiles; do
    # Remove the path and file extension, if any
    profileName=$(basename $profile)
    profileName="${profileName%.*}"
    profilePath="$GUIX_EXTRA_PROFILES/$profileName"
    manifestPath=$HOME/.config/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
      echo
      echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
      echo

      mkdir -p $profilePath
      guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

      # Source the new profile
      GUIX_PROFILE="$profilePath/$profileName"
      if [ -f $GUIX_PROFILE/etc/profile ]; then
        . "$GUIX_PROFILE"/etc/profile
      else
        echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
      fi
    else
      echo "No profile found at path" $profilePath
    fi
  done

#+end_src
